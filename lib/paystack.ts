// This file is generated by Firebase Studio.
'use server';
import axios from 'axios';
import { config } from 'dotenv';

config();

const PAYSTACK_SECRET_KEY = process.env.PAYSTACK_SECRET_KEY;
const PAYSTACK_BASE_URL = 'https://api.paystack.co';

interface VerifyBankAccountParams {
    bank_code: string;
    account_number: string;
}

export async function verifyBankAccount(params: VerifyBankAccountParams) {
    if (!PAYSTACK_SECRET_KEY) {
        throw new Error('Paystack secret key is not configured.');
    }
    if (!params.account_number || !params.bank_code) {
        throw new Error('Account number and bank code are required.');
    }

    try {
        const response = await axios.get(`${PAYSTACK_BASE_URL}/bank/resolve`, {
            headers: {
                Authorization: `Bearer ${PAYSTACK_SECRET_KEY}`,
            },
            params: {
                account_number: params.account_number,
                bank_code: params.bank_code,
            }
        });
        
        if (response.data && response.data.status === true) {
            return response.data.data; // { account_number, account_name, bank_id }
        } else {
            throw new Error(response.data.message || 'Failed to verify account.');
        }

    } catch (error: any) {
        console.error("Paystack Account Verification Error:", error.response?.data || error.message);
        const errorMessage = error.response?.data?.message || 'An error occurred during account verification.';
        throw new Error(errorMessage);
    }
}


interface CreateRecipientParams {
    name: string;
    account_number: string;
    bank_code: string;
}

export async function createTransferRecipient(params: CreateRecipientParams): Promise<{ recipient_code: string }> {
    if (!PAYSTACK_SECRET_KEY) {
        throw new Error('Paystack secret key is not configured.');
    }

    try {
        const response = await axios.post(`${PAYSTACK_BASE_URL}/transferrecipient`, 
        {
            type: "nuban",
            name: params.name,
            account_number: params.account_number,
            bank_code: params.bank_code,
            currency: "NGN"
        }, 
        {
            headers: {
                Authorization: `Bearer ${PAYSTACK_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.data && response.data.status === true) {
            return response.data.data;
        } else {
            throw new Error(response.data.message || 'Failed to create transfer recipient.');
        }
    } catch (error: any) {
        console.error("Paystack Create Recipient Error:", error.response?.data || error.message);
        const errorMessage = error.response?.data?.message || 'An error occurred while creating the transfer recipient.';
        throw new Error(errorMessage);
    }
}


interface InitiateTransferParams {
    recipient: string; // recipient_code
    amount: number; // in kobo
    reason: string;
}

export async function initiateTransfer(params: InitiateTransferParams): Promise<any> {
    if (!PAYSTACK_SECRET_KEY) {
        throw new Error('Paystack secret key is not configured.');
    }

    try {
        const response = await axios.post(`${PAYSTACK_BASE_URL}/transfer`, 
        {
            source: "balance",
            amount: params.amount,
            recipient: params.recipient,
            reason: params.reason
        },
        {
            headers: {
                Authorization: `Bearer ${PAYSTACK_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.data && response.data.status === true) {
            return response.data.data; // Contains transfer_code and status
        } else {
            throw new Error(response.data.message || 'Failed to initiate transfer.');
        }

    } catch (error: any) {
        console.error("Paystack Initiate Transfer Error:", error.response?.data || error.message);
        const errorMessage = error.response?.data?.message || 'An error occurred while initiating the transfer.';
        throw new Error(errorMessage);
    }
}
